---
openapi: 3.0.0
info:
  title: RFID Security Service
  description: This API allows the management of RFID media, permissions and associations.
  contact:
    email: Brian.Curnow@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: /api/v1.0
  description: Version 1.0.
tags:
  - name: association
    description: Association APIs
  - name: authorized
    description: Authorization APIs
  - name: config
    description: Config APIs
  - name: guest
    description: Guest APIs
  - name: media
    description: Media APIs
  - name: media-perm
    description: Media Permission APIs
  - name: permission
    description: Permission APIs
  - name: reader
    description: RFID Reader API
security:
  - ApiKey: []
paths:
  /associations:
    get:
      tags:
        - association
      summary: Retrieves a list of all associations
      description: |
        Retrieves an array of all the media_id to permission name associations. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of Association objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
        '400':
          description: Invalid request.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - association
      summary: Associates media with a permission
      description: |
        Business interface which takes a media_id and a permission name and creates an association.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Association'
      responses:
        '201':
          description: New record created.
        '409':
          description: Record already exists.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /associations/{media_id}:
    get:
      tags:
        - association
      summary: Retrieves all the associations for the specified media
      description: |
        Retrieves an array of all the media_id to permission name associations for the specified media.
      parameters:
        - name: media_id
          in: path
          description: The media_id to lookup the associations for
          required: true
          schema:
            type: string
            example: 80558ABA5C3504
      responses:
        '200':
          description: Array of permission names.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Association'
        '400':
          description: Invalid request.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /associations/{media_id}/{perm_name}:
    delete:
      tags:
        - association
      summary: Deletes an association
      description: |
        Business interface which takes a media_id and a permision name and deletes the associate.
      parameters:
      - name: media_id
        in: path
        description: The media_id of the association.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      - name: perm_name
        in: path
        description: The permmission name of the association.
        required: true
        schema:
          type: string
          example: Open Door
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /authorized/{media_id}/{perm_name}:
    get:
      tags:
        - authorized
      summary: Checks if media has a permission
      description: |
        Checks if the supplied media_id has the supplied permission
      parameters:
      - name: media_id
        in: path
        description: The media_id to check
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      - name: perm_name
        in: path
        description: The permmission name to check
        required: true
        schema:
          type: string
          example: Open Door
      responses:
        '200':
          description: Media has the supplied permission.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '403':
          description: Media does not have the supplied permission
  /configs:
    get:
      tags:
        - config
      summary: Retrieves all the config
      description: |
        Retrieves all the config records. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of Config objects.
          content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Config'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - config
      summary: Creates a new config
      description: |
        Accepts a JSON payload containing a full config record and creates it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '201':
          description: New record created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: Record already exists.
  /configs/{key}:
    get:
      tags:
        - config
      summary: Retrieves config by key
      description: |
        Takes a key and returns the config.
      parameters:
      - name: key
        in: path
        description: The key of the requested config.
        required: true
        schema:
          type: string
          example: Admin User
      responses:
        '200':
          description: Config object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
    delete:
      tags:
        - config
      summary: Deletes config by key
      description: |
        Takes a key and deletes that record. This method does not fail if the config does not exist as this is considered success.
      parameters:
      - name: key
        in: path
        description: The key of the config to delete.
        required: true
        schema:
          type: string
          example: Admin User
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - config
      summary: Updates the config by key
      description: |
        Accepts a JSON payload containing a full config record and updates it. The key is optional in the object and will be ignored.
      parameters:
      - name: key
        in: path
        description: The key of the config to update.
        required: true
        schema:
          type: string
          example: Admin User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleConfig'
            example:
              value: admin
      responses:
        '200':
          description: Record was updated.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records updated or created
        '201':
          description: Record did not exist and was created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /guests:
    get:
      tags:
        - guest
      summary: Retrieves all the guests
      description: |
        Retrieves all the guest records. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of Guest objects.
          content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Guest'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - guest
      summary: Creates a new guest
      description: |
        Accepts a JSON payload containing a full guest record and creates it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
      responses:
        '201':
          description: New record created.
        '409':
          description: Record already exists.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /guests/{id}:
    get:
      tags:
        - guest
      summary: Retrieves guest by id
      description: |
        Takes a id and returns the guest.
      parameters:
      - name: id
        in: path
        description: The id of the requested guest.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: Guest object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Guest'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
    delete:
      tags:
        - guest
      summary: Deletes guest by id
      description: |
        Takes a id and deletes that record. This method does not fail if the guest does not exist as this is considered success.
      parameters:
      - name: id
        in: path
        description: The id of the guest to delete.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - guest
      summary: Updates the guest by id
      description: |
        Accepts a JSON payload containing a full guest record and updates it. The id is optional in the payload and will be ignored if present.
      parameters:
      - name: id
        in: path
        description: The id of the guest to update.
        required: true
        schema:
          type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Guest'
            example:
              first_name: Mickey
              last_name: Mouse
      responses:
        '200':
          description: Record was updated.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records updated or created
        '201':
          description: Record did not exist and was created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /media:
    get:
      tags:
        - media
      summary: Retrieves all the media
      description: |
        Retrieves all the media records. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of Media objects.
          content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Media'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - media
      summary: Creates a new media
      description: |
        Accepts a JSON payload containing a full media record and creates it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Media'
      responses:
        '201':
          description: New record created.
        '409':
          description: Record already exists.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /media/{id}:
    get:
      tags:
        - media
      summary: Retrieves media by id
      description: |
        Takes a id and returns the media.
      parameters:
      - name: id
        in: path
        description: The id of the requested media.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      responses:
        '200':
          description: Media object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
    delete:
      tags:
        - media
      summary: Deletes media by id
      description: |
        Takes a id and deletes that record. This method does not fail if the media does not exist as this is considered success.
      parameters:
      - name: id
        in: path
        description: The id of the media to delete.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - media
      summary: Updates the media by id
      description: |
        Accepts a JSON payload containing a full media record and updates it. The id is optional in the payload and will be ignored if present.
      parameters:
      - name: id
        in: path
        description: The id of the media to update.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleMedia'
            example:
              name: Anna's MagicBand
              desc: This is the MagicBand that Anna got from Elsa
      responses:
        '200':
          description: Record was updated.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records updated or created
        '201':
          description: Record did not exist and was created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /media-perms:
    get:
      tags:
        - media-perm
      summary: Retrieves all the media permisions
      description: |
        Retrieves all the media permission records. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of MediaPerm objects.
          content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/MediaPerm'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - media-perm
      summary: Associates a media with a permission
      description: |
        Accepts a JSON payload containing a full media_perm record and creates it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaPerm'
      responses:
        '201':
          description: New record created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: Record already exists.
          description: Record not found.
  /media-perms/{media_id}/{perm_id}:
    get:
      tags:
        - media-perm
      summary: Retrieves media permission by media_id and perm_id
      description: |
        Takes a media_id and a perm_id and returns the media permission.
      parameters:
      - name: media_id
        in: path
        description: The media_id of the requested media permission.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      - name: perm_id
        in: path
        description: The perm_id of the requested media permission.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: MediaPerm object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaPerm'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
    delete:
      tags:
        - media-perm
      summary: Deletes media permission by id
      description: |
        Takes an id and deletes that record. This method does not fail if the media permission does not exist as this is considered success.
      parameters:
      - name: media_id
        in: path
        description: The media_id of the requested media permission.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      - name: perm_id
        in: path
        description: The perm_id of the requested media permission.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - media-perm
      summary: Updates the media permission by id
      description: |
        Accepts a JSON payload containing a full media permission record and updates it. The id is optional in the object and will be ignored.
      parameters:
      - name: media_id
        in: path
        description: The media_id of the requested media permission.
        required: true
        schema:
          type: string
          example: 80558ABA5C3504
      - name: perm_id
        in: path
        description: The perm_id of the requested media permission.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: Record was updated.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records updated or created
        '201':
          description: Record did not exist and was created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /permissions:
    get:
      tags:
        - permission
      summary: Retrieves all the permisions
      description: |
        Retrieves all the permission records. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of Permission objects.
          content:
           application/json:
             schema:
               type: array
               items:
                 $ref: '#/components/schemas/Permission'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - permission
      summary: Creates a new permission
      description: |
        Accepts a JSON payload containing a full permission record and creates it.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Permission'
      responses:
        '201':
          description: New record created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: Record already exists.
  /permissions/{id}:
    get:
      tags:
        - permission
      summary: Retrieves permission by id
      description: |
        Takes a name and returns the permission.
      parameters:
      - name: id
        in: path
        description: The id of the requested permission.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: Permission object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
    delete:
      tags:
        - permission
      summary: Deletes permission by id
      description: |
        Takes an id and deletes that record. This method does not fail if the permission does not exist as this is considered success.
      parameters:
      - name: id
        in: path
        description: The id of the permission to delete.
        required: true
        schema:
          type: integer
          example: 1
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - permission
      summary: Updates the permission by id
      description: |
        Accepts a JSON payload containing a full permission record and updates it. The id is optional in the object and will be ignored.
      parameters:
      - name: id
        in: path
        description: The id of the permission to update.
        required: true
        schema:
          type: integer
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimplePermission'
            example:
              desc: Opens the door
      responses:
        '200':
          description: Record was updated.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records updated or created
        '201':
          description: Record did not exist and was created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /player/{name}:
    get:
      tags:
        - sound
      summary: Retrieves a sound as an audio/wav stream to be used with various audio players.
      security: []
      description: |
        Retrieves a sound as an audio/wav stream to be used with various audio players.
      parameters:
      - name: name
        in: path
        description: The name of the requested sound.
        required: true
        schema:
          type: string
          example: read.wav
      responses:
        '200':
          description: Sound object.
          content:
            audio/wav:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
  /reader:
    get:
      tags:
        - reader
      summary: Reads an RFID tag via the configured reader
      description: |
        Uses the configured reader read the RFID UID.
      parameters:
        - name: timeout
          in: query
          description: The amount of time in seconds to wait for a UID.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 30
            example: 20
      responses:
        '200':
          description: RFID
          content:
            application/json:
              schema:
                type: string
                example: 80558ABA5C3504
        '204':
          description: No data read from reader, it is recommended to try again, possibly with a longer timeout.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /sounds:
    get:
      tags:
        - sound
      summary: Retrieves all the sounds
      description: |
        Retrieves all the sound records. This implementation does not currently support pagination.
      responses:
        '200':
          description: Array of Sound objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SimpleSound'
        '400':
          description: Invalid request.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - sound
      summary: Creates a new sound
      description: |
        Accepts a multi-part form upload of an audio/wav file and a name and creates a new sound record.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - content
              properties:
                name:
                  type: string
                  example: read.wav
                content:
                  type: string
                  format: binary
            encoding:
              content:
                contentType: audio/wav
      responses:
        '201':
          description: New record created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '409':
          description: Record already exists.
  /sounds/{name}:
    get:
      tags:
        - sound
      summary: Retrieves sound by name
      description: |
        Takes a name and returns the sound.
      parameters:
      - name: name
        in: path
        description: The name of the requested sound.
        required: true
        schema:
          type: string
          example: read.wav
      responses:
        '200':
          description: Sound object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sound'
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: Record not found.
    delete:
      tags:
        - sound
      summary: Deletes sound by name
      description: |
        Takes a name and deletes that record. This method does not fail if the sound does not exist as this is considered success.
      parameters:
      - name: name
        in: path
        description: The name of the sound to delete.
        required: true
        schema:
          type: string
          example: read.wav
      responses:
        '200':
          description: Record was either deleted or did not exist.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records deleted, could be zero if the record did not exist.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /sounds/{id}:
    put:
      tags:
        - sound
      summary: Updates the sound by id
      description: |
        Accepts a JSON payload containing a full sound record and updates it. The id is optional in the payload and will be ignored if present.
      parameters:
      - name: id
        in: path
        description: The id of the sound to update.
        required: true
        schema:
          type: integer
          example: 1
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: read.wav
                content:
                  type: string
                  format: binary
            encoding:
              content:
                contentType: audio/wav
      responses:
        '200':
          description: Record was updated.
          headers:
            x-record-count:
              schema:
                type: integer
              description: The actual number of records updated or created
        '201':
          description: Record did not exist and was created.
        '400':
          description: Invalid request.
        '401':
          $ref: "#/components/responses/UnauthorizedError"
components:
  schemas:
    Association:
      required:
      - media_id
      - perm_name
      type: object
      properties:
        media_id:
          type: string
          example: 80558ABA5C3504
        perm_name:
          type: string
          example: Open Door
    Config:
      allOf:
        - $ref: '#/components/schemas/SimpleConfig'
        - type: object
          required:
          - key
    Guest:
      required:
      - first_name
      - last_name
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        first_name:
          type: string
          example: Mickey
        last_name:
          type: string
          example: Mouse
    Media:
      allOf:
        - $ref: '#/components/schemas/SimpleMedia'
        - type: object
          required:
          - id
    MediaPerm:
      type: object
      required:
      - media_id
      - perm_id
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        media_id:
          type: string
          example: 80558ABA5C3504
        perm_id:
          type: integer
          example: 1
    Permission:
      allOf:
        - $ref: '#/components/schemas/SimplePermission'
        - type: object
          required:
          - name
    Sound:
      allOf:
        - $ref: '#/components/schemas/SimpleSound'
        - type: object
          required:
            - id
            - name
            - content
    SimpleConfig:
      required:
      - value
      type: object
      properties:
        key:
          type: string
          example: Admin User
        value:
          type: string
          example: admin
    SimpleMedia:
      required:
      - name
      type: object
      properties:
        id:
          type: string
          example: 80558ABA5C3504
        name:
          type: string
          example: Anna's MagicBand
        desc:
          type: string
          example: This is the MagicBand that Anna got from Elsa
          nullable: true
    SimplePermission:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: Open Door
        desc:
          type: string
          example: Opens the door
          nullable: true
    SimpleSound:
      required:
        - name
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        name:
          type: string
          example: read.wav
        content:
          type: string
          format: bytes
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-RFIDSECURITYSVC-API-KEY
      x-apikeyInfoFunc : rfidsecuritysvc.util.auth.verify_apikey
  responses:
    UnauthorizedError:
      description: API key is missing or invalid
      headers:
        WWW_Authenticate:
          schema:
            type: string
          description: You must provide the X-RFIDSECURITYSVC-API-KEY header with an api key
